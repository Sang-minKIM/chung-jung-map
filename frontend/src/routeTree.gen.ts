/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PoliciesIndexRouteImport } from './routes/policies/index'
import { Route as NoticesIndexRouteImport } from './routes/notices/index'
import { Route as NoticesIdIndexRouteImport } from './routes/notices/$id/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PoliciesIndexRoute = PoliciesIndexRouteImport.update({
  id: '/policies/',
  path: '/policies/',
  getParentRoute: () => rootRouteImport,
} as any)
const NoticesIndexRoute = NoticesIndexRouteImport.update({
  id: '/notices/',
  path: '/notices/',
  getParentRoute: () => rootRouteImport,
} as any)
const NoticesIdIndexRoute = NoticesIdIndexRouteImport.update({
  id: '/notices/$id/',
  path: '/notices/$id/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/notices': typeof NoticesIndexRoute
  '/policies': typeof PoliciesIndexRoute
  '/notices/$id': typeof NoticesIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/notices': typeof NoticesIndexRoute
  '/policies': typeof PoliciesIndexRoute
  '/notices/$id': typeof NoticesIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/notices/': typeof NoticesIndexRoute
  '/policies/': typeof PoliciesIndexRoute
  '/notices/$id/': typeof NoticesIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/notices' | '/policies' | '/notices/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/notices' | '/policies' | '/notices/$id'
  id: '__root__' | '/' | '/notices/' | '/policies/' | '/notices/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NoticesIndexRoute: typeof NoticesIndexRoute
  PoliciesIndexRoute: typeof PoliciesIndexRoute
  NoticesIdIndexRoute: typeof NoticesIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/policies/': {
      id: '/policies/'
      path: '/policies'
      fullPath: '/policies'
      preLoaderRoute: typeof PoliciesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notices/': {
      id: '/notices/'
      path: '/notices'
      fullPath: '/notices'
      preLoaderRoute: typeof NoticesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notices/$id/': {
      id: '/notices/$id/'
      path: '/notices/$id'
      fullPath: '/notices/$id'
      preLoaderRoute: typeof NoticesIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NoticesIndexRoute: NoticesIndexRoute,
  PoliciesIndexRoute: PoliciesIndexRoute,
  NoticesIdIndexRoute: NoticesIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
